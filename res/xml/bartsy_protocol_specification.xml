<?xml version="1.0" encoding="utf-8"?> 

<bartsy_protocol>

    <!--  All fields below are implemented for convenience using a opcode, arg1, arg2, etc. XML implementation -->

	<command>
	    <opcode></opcode>
	    <argument></argument>
	    <argument></argument>
	</command>
    
    
    <!--  Identification opcodes are sent before any command can be send to establish a session 
    	  number as well as specify master/slave serial numbers (sn). Masters establish the session
    	  ID and send it to slaves so a connection session will also need to be set by the master. -->
    
    <identification>
		<session_id>1</session_id>
		<master_sn>23435553</master_sn>
		
		<feature>
		    <!-- addtional fields for future features -->
		</feature>
    </identification>

    <identification_response>
        <session_id>1</session_id>
        <master_id>23435553</master_id>
        <slave_id>2354435</slave_id>
        
		<!--  Profile information is sent by each slave to the master to identify the owner of the 
        	  app that walked in. This information is used to verify purchase (picture/name) and to 
        	  send to other mobile devices. When ordering for another person, the profile id of the 
        	  sender is also sent to the information. 
        	  
        	  The profile information is sent directly from the peers instead of downloaded from the 
        	  internet. This ensures it's always fresh even if the server or peer isn't connected.	   
       	-->
       	
       	<profile>
       	    <profile_id>23040320034</profile_id>	<!--  unique identifier enfored by Bartsy servers / could be FB ID -->
       	    <first_name>Peter</first_name>
       	    <last_name>Kellis</last_name>
       	    <height></height> 						<!--  height in inches -->
       	    <dob>1982/03/23</dob>
       	    <pictures>
	       	    <caption>On the courts</caption><data>203499abe32003ffe0103cd234ddeeff2344</data>
	       	    <caption>On the courts</caption><data>203499abe32003ffe0103cd234ddeeff2344</data>
       	    </pictures>
       	</profile>        
     
    </identification_response>
    
    
    <!--  Commands all have a timestamp from the sender, the SN of the sender and the session 
    	  number of this session. There is also a unique serial number for the command that is 
    	  unique for the sesion. 
    	  
    	  Each command expects a response with the same command serial number after which it is 
    	  considered completed. 
    	  
    	  If a response doesn't come within the specified timeout, the command is retried for the 
    	  specified number of retries after which it is considered failed. 
    	  
    	  If a command response arrives with a command serial number that has been failed, a special
    	  'command_failed' tag is sent to notify the other party to take appropriate action --> 
    
    <command 
        timestamp="2342355234" 
        master_id="23435553" 
        slave_id="2354435"
		session_id="1"
        command_id="13">

        <!-- Server commands -->
        <!-- Only sent by the server to client(s) -->
        
        <!--  Simple ping sent every few seconds to make sure connection is alive -->
        <ping>
         	<time_elapsed>23043</time_elapsed> 		<!--  milliseconds since last ping was sent by server -->
		</ping> 

        <!-- as each individual item of an order is completed. If this is a bar it means the drink is ready
        	 and the client app will display an alert. If it's a restaurant or other this could be silent.  -->
        <order_complete>
            <order_id>23</order_id>					<!--  returns order ID to client for logging purposes -->
            <price>12.02</price>					<!--  total price of the order in the local denomination -->
            <item>Sambuca</item>
        </order_complete>

        <!-- When orders are finished, clients or the server may initiate a close tab command. A summary of 
        	 all orders placed is sent back along with their prices, the total and any additional fees or taxes -->
		<close_tab>
		    <order>
			    <item>Sambuca</item>				<!--  description of the item to be ordered -->
			    <price>11</price>					<!--  if present suggests a price to the server -->
		    </order>
		    <order>
			    <item>Absinthe</item>				<!--  description of the item to be ordered -->
			    <price>12</price>					<!--  if present suggests a price to the server -->
		    </order>
		    <tax>3.04</tax>							<!--  additional sales tax if any -->
		    <fees>0.8</fees>						<!--  bartsy processing fees are typically 5% of order -->
		</close_tab>

       
        <!--  Client commands -->
        <!-- Only sent by the client(s) to the server -->

		<!--  Orders can bundle more than one items or have just one. A new order opens a tab, unique for the session. -->
		<order>
		    <item>Sambuca</item>					<!--  description of the item to be ordered -->
		    <price></price>							<!--  if present suggests a price to the server -->
		</order>
		
		<!-- When all orders are done the client can ask to close and pay. This initiates a close_tab command from 
			 the server. Only one tab is allowed per client per session. Tabs and order id's are maintained by the 
			 server.
			 
			 The server can initiate a close_tab command too independently. If a connection is lost for 
			 more than two hour and a tab is still open at the server, the tab is automatically closed and the 
			 order is forwarded to the client via the Bartsy server (and/or email) along with a link to accep the 
			 charges. If the client doesn't accept the charges in one day the case is forwarded to the dispute
			 resolution department. -->
		<close_tab>
		</close_tab>

		<!--  In response to a close tab command for the server, clients must send an accept charges command. If
			  no such command is received in bounds, the same protocol happens as with the close_tab command. -->
		<accept_charges>
		    <tab_id>1</tab_id>						<!-- ID of the tab for verification purposes -->
		    <total>12</total>						<!-- total of the charges accepted for verification purposes -->
		    <tip>2.03</tip>							<!-- tip amount in the local demonination -->
		    <payment>PayPal</payment>				<!-- Client has a PayPal account on file -->
		    <payment>CreditCard</payment> 			<!-- TODO credit card info is transitted to the server -->
		    <payment>Bartsy</payment>				<!-- Client is using Bartsy as the payment processor -->
		</accept_charges>
			
    </command>
    
    <command_response
        timestamp="2342355234" 
        master_id="23435553" 
        slave_id="2354435"
		session_id="1"
        command_id="13">
        <success>	<!--  only the first success/failure tag is parsed. Multiple can be sent for debuging -->
            <response_id></response_id>
            <response_id></response_id>
        </success>
        <failure>optional failure reason</failure>	
    </command_response>

</bartsy_protocol>
    